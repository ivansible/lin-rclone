---
- name: extract item options for {{ item.name }}
  set_fact:
    _name: "{{ item.name }}"
    _path: "{{ item.path }}"
    _config: "{{ item.config }}"
    _fstab: "{{ item.fstab |d(fstab_default) |bool }}"
    _automount: "{{ item.path is defined and item.automount |d(false) |bool }}"
    _nonroot: "{{ item.nonroot |d(false) |bool }}"
    _logto: "{{ item.logto |d('') }}"
    _proxy: "{{ item.proxy |d('') }}"
    # explicitly convert token to string to avoid json being treated as a dict
    _token: "{{ item.token |d('') |string }}"
    _reuse_token: "{{ item.reuse_token |d('') |string |lower not in ['false','no','0',''] }}"
    _reuse_from: "{{ (item.reuse_token |d('') |string |lower in ['true','yes','1',''])
                     |ternary(item.name, item.reuse_token |d('') |string) }}"
  no_log: "{{ hide_secrets |bool }}"

- name: obtain previous token for {{ _name }}
  shell:
    cmd: |
      from __future__ import print_function
      try:
        import configparser
      except ImportError:
        import ConfigParser as configparser
      config = configparser.ConfigParser()
      config.read('{{ lin_rclone_config |expanduser }}')
      try:
        print(config.get('{{ _reuse_from }}', 'token'))
      except configparser.NoSectionError:
        pass
      except configparser.NoOptionError:
        pass
    executable: "{{ ansible_python.executable }}"
  no_log: "{{ hide_secrets |bool }}"
  register: old_token_result
  when: _reuse_token
  changed_when: false

- name: setup config section for {{ _name }}
  blockinfile:
    path: "{{ lin_rclone_config |expanduser }}"
    marker: "# == {mark} {{ _name }} =="
    # rclone token refresher adds empty lines after sections ends and so do we
    block: |+
      [{{ _name }}]
      {{ new_config }}

    create: true
    # rclone token refresher will strip the last end marker comment causing blockinfile mess
    # as a workaround, insert an empty section at the end of file
    insertbefore: "\\[end_of_ansible_blocks\\]"
  no_log: "{{ hide_secrets |bool }}"
  vars:
    # explicitly convert token to string to avoid json being treated as a dict
    new_token: "{{ old_token_result.stdout |d('') or _token |string }}"
    new_config: "{{ _config |regex_replace('\\[TOKEN\\]', new_token) }}"
  ## task obtaining previous token is skipped in check mode
  register: rclone_section_result
  changed_when:
    - rclone_section_result is changed
    - not (_reuse_token and ansible_check_mode)
  notify: restart remote systemd mounts

- name: create mountpoint for {{ _name }}
  file:
    path: "{{ _path }}"
    state: directory
  when: _path |d('')

- name: setup mount for {{ _name }}
  mount:
    path: "{{ _path }}"
    src: "{{ _name }}:"
    fstype: rclone
    state: "{{ _fstab |ternary('present', 'absent') }}"
    opts: "{{ options |select |join(',') }}"
  vars:
    options:
      # basic options
      - rw
      - _netdev
      - noauto
      - nofail
      # rclone options
      - vfs-cache-mode={{ lin_rclone_vfs_cache_mode }}
      - dir-cache-time={{ lin_rclone_dir_cache_time }}
      # rclonefs options
      - "{{ _proxy |ternary('proxy=%s' % _proxy, '') }}"
      # fuse options
      - "{{ _nonroot |ternary('gid=%d' % lin_rclone_group_gid, '') }}"
      - "{{ _nonroot |ternary('allow_other', '') }}"
      # systemd / automount options
      - "{{ _automount |ternary('x-systemd.automount', '') }}"
      - "{{ _automount |ternary('x-systemd.idle-timeout=%d' % lin_rclone_idle_timeout, '') }}"
      # troubleshooting options
      - "{{ _logto |ternary('log-file=%s' % _logto|expanduser, '') }}"
      - "{{ _logto |ternary('verbose=2', '') }}"
      - "{{ _logto |ternary('x-systemd.mount-timeout=%d' % lin_rclone_mount_timeout, '') }}"
  when: _path |d('')
  notify: restart remote systemd mounts
...
