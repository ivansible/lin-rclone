---
- name: extract item options for {{ item.name }}
  set_fact:
    _name: "{{ item.name }}"
    _path: "{{ item.path }}"
    _unit_path: "/etc/systemd/system/{{ item.path |regex_replace('^/') |replace('/','-') }}"
    _config: "{{ item.config }}"
    _mount: "{{ mount |bool }}"
    _systemd: "{{ systemd |bool }}"
    _fstab: "{{ fstab |bool }}"
    _automount: "{{ automount |bool }}"
    _nonroot: "{{ nonroot |bool }}"
    _bglog: "{{ bglog |bool }}"
    _proxy: "{{ proxy }}"
    # explicitly convert token to string to avoid json being treated as a dict
    _token: "{{ token }}"
    _reuse_token: "{{ reuse_lower not in ['false','no','0',''] }}"
    _reuse_from: "{{ reuse_bool |ternary(item.name, reuse_str) }}"
    _options_str: "{{ options_list |select |join(',') }}"
  vars:
    options_list:
      # basic options
      - rw
      - "{{ fstab |bool |ternary('noauto','') }}"
      - "{{ fstab |bool |ternary('nofail','') }}"
      - "{{ fstab |bool |ternary('_netdev','') }}"
      # fuse options
      - "{{ nonroot |bool |ternary('gid=%s' % group_gid, '') }}"
      - "{{ nonroot |bool |ternary('allow_other', '') }}"
      # vfs options
      - "{{ cache_dir |ternary('cache_dir=%s' % cache_dir, '') }}"
      - "{{ cache_mode |ternary('vfs-cache-mode=%s' % cache_mode, '') }}"
      - "{{ cache_time |ternary('dir-cache-time=%s' % cache_time, '') }}"
      # rclonefs options
      - "{{ proxy |ternary('proxy=%s' % proxy, '') }}"
      # systemd / automount options
      - "{{ fstab_automount |bool |ternary('x-systemd.automount', '') }}"
      - "{{ fstab_automount |bool |ternary('x-systemd.idle-timeout=%d' % lin_rclone_idle_timeout, '') }}"
      # troubleshooting options
      - "{{ mount_verb_default |bool |ternary('', 'mount-verb=%s' % mount_verb_str) }}"
      - "{{ bglog |bool |ternary('bglog', '') }}"
    mount: "{{ item.mount |d(true) |bool }}"
    systemd: "{{ item.systemd |d(lin_rclone_prefer_systemd) |d(false) |bool }}"
    automount: "{{ item.path is defined and item.automount |d(false) |bool }}"
    fstab: "{{ mount |bool and not systemd |bool }}"
    fstab_automount: "{{ fstab |bool and automount |bool }}"
    nonroot: "{{ item.nonroot |d(false) |bool }}"
    bglog: "{{ item.bglog |d(false) |bool }}"
    proxy: "{{ item.proxy |d('') }}"
    token: "{{ item.token |d('') |string }}"
    reuse_str: "{{ item.reuse_token |d('') |string }}"
    reuse_lower: "{{ reuse_str |lower }}"
    reuse_bool: "{{ reuse_lower in ['true','yes','1',''] }}"
    cache_dir: "{{ item.cache_dir |d('',true) }}"
    group_gid: "{{ lin_rclone_group_gid |d(1000) }}"
    cache_mode: "{{ lin_rclone_vfs_cache_mode |d('',true) }}"
    cache_time: "{{ lin_rclone_dir_cache_time |d('',true) }}"
    mount_verb_str: "{{ lin_rclone_mount_verb |d('',true) |string }}"
    mount_verb_default: "{{ mount_verb_str in ['mount', 'default', ''] }}"
  no_log: "{{ hide_secrets |bool }}"

- name: obtain previous token for {{ _name }}
  shell:
    cmd: |
      from __future__ import print_function
      try:
        import configparser
      except ImportError:
        import ConfigParser as configparser
      config = configparser.ConfigParser()
      config.read('{{ lin_rclone_config |expanduser }}')
      try:
        print(config.get('{{ _reuse_from }}', 'token'))
      except configparser.NoSectionError:
        pass
      except configparser.NoOptionError:
        pass
    executable: "{{ ansible_python.executable }}"
  no_log: "{{ hide_secrets |bool }}"
  register: old_token_result
  when: _reuse_token
  changed_when: false

- name: setup config section for {{ _name }}
  blockinfile:
    path: "{{ lin_rclone_config |expanduser }}"
    marker: "# == {mark} {{ _name }} =="
    # rclone token refresher adds empty lines after sections ends and so do we
    block: |+
      [{{ _name }}]
      {{ new_config }}

    create: true
    mode: 0640
    # rclone token refresher will strip the last end marker comment causing blockinfile mess
    # as a workaround, insert an empty section at the end of file
    insertbefore: "\\[end_of_ansible_blocks\\]"
  no_log: "{{ hide_secrets |bool }}"
  vars:
    # explicitly convert token to string to avoid json being treated as a dict
    new_token: "{{ old_token_result.stdout |d('') or _token |string }}"
    new_config: "{{ _config |regex_replace('\\[TOKEN\\]', new_token) }}"
  ## task obtaining previous token is skipped in check mode
  register: rclone_section_result
  changed_when:
    - rclone_section_result is changed
    - not (_reuse_token and ansible_check_mode)
  notify: restart remote systemd mounts

- name: create mountpoint for {{ _name }}
  file:
    path: "{{ _path }}"
    state: directory
    mode: 0755
  when: _path |d('')

- name: setup fstab mount for {{ _name }}
  mount:
    path: "{{ _path }}"
    src: "{{ _name }}:"
    fstype: rclone
    state: "{{ _fstab |ternary('present', 'absent') }}"
    opts: "{{ _options_str }}"
  when: _path |d('')
  notify: restart remote systemd mounts

- name: setup systemd mount unit for {{ _name }}
  template:
    src: systemd.mount
    dest: "{{ _unit_path }}.mount"
    mode: 0644
  when:
    - _path |d('')
    - _mount |bool
    - _systemd |bool
  notify: restart remote systemd mounts

- name: setup systemd automount unit for {{ _name }}
  template:
    src: systemd.automount
    dest: "{{ _unit_path }}.automount"
    mode: 0644
  when:
    - _path |d('')
    - _mount |bool
    - _systemd |bool
    - _automount |bool
  notify: restart remote systemd mounts

- name: remove systemd mount unit for {{ _name }}
  file:
    path: "{{ _unit_path }}.mount"
    state: absent
  when: not(_systemd and _mount)
  notify: restart remote systemd mounts

- name: remove systemd automount unit for {{ _name }}
  file:
    path: "{{ _unit_path }}.automount"
    state: absent
  when: not(_systemd and _mount and _automount)
  notify: restart remote systemd mounts
...
